package com.galaxyeye.websocket.test.galaxyeye.WxService.TestCase;/* * Description:com.galaxyeye.websocket.test * @Date Create on 16:11 * @author <a href="mailto:yangyi@galaxyeye-tech.com">yangyi</a> * @Version JDK 1.8 * @since version 1.0 Copyright 2019-06-10日galaxyeye All Rights Reserved. */import com.alibaba.fastjson.JSON;import com.galaxyeye.websocket.application.repository.TKeyindexRepository;import com.galaxyeye.websocket.application.repository.TUserRepository;import com.galaxyeye.websocket.application.repository.TUserkeysRepository;import com.galaxyeye.websocket.infrastructure.repository.entity.TKeyindex;import com.galaxyeye.websocket.infrastructure.repository.entity.example.TKeyindexExample;import com.galaxyeye.websocket.infrastructure.repository.entity.example.TUserExample;import com.galaxyeye.websocket.infrastructure.repository.entity.example.TUserkeysExample;import com.galaxyeye.websocket.test.galaxyeye.BaseTest;import com.galaxyeye.websocket.test.galaxyeye.CustomReport.Enum.ModuleNameEnum;import com.galaxyeye.websocket.test.galaxyeye.WxService.BO.WxServiceHeartBeatBO;import com.galaxyeye.websocket.test.galaxyeye.WxService.BO.WxServiceReqLoginBO;import com.galaxyeye.websocket.tool.jedis.JedisTemplate;import com.galaxyeye.websocket.tool.mq.TestProducer;import com.galaxyeye.websocket.tool.mq.TestReciever;import com.galaxyeye.websocket.tool.websocket.client.WebSocketClient;import com.galaxyeye.websocket.tool.websocket.request.WebsocketReqContentPara;import com.galaxyeye.websocket.tool.websocket.response.WebsocketResContentPara;import com.galaxyeye.websocket.tool.websocket.response.WebsocketResLoginPara;import com.jayway.jsonpath.JsonPath;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Component;import org.testng.annotations.Test;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;@Slf4j@Componentpublic class WxServiceLoginTest extends BaseTest {    @Autowired    private JedisTemplate jedisTemplate;    @Autowired    private TestProducer testProducer;    @Autowired    private TestReciever testReciever;    private WebSocketClient webSocketClient=null;    @Autowired    private WxServiceHeartBeatTest wxServiceHeartBeatTest;    @Autowired    private TKeyindexRepository tKeyindexRepository;    @Autowired    private TUserRepository tUserRepository;    @Autowired    private TUserkeysRepository tUserkeysRepository;    /**     * 1、登录增加统计信息，请求参数增加statistics且用户已经存在     */    @Test    public void WxServiceLoginTestByExistParameterStatisticsAndExistUser() {        initData();        WxServiceReqLoginBO wxServiceReqLoginBO = new WxServiceReqLoginBO();        Map<String,String> statistics=new HashMap<>();        statistics.put("channelNo","小程序服务端渠道编号");        statistics.put("维度一","渠道编号");        statistics.put("维度二","28");        wxServiceReqLoginBO.setBmAppid("1.00002");        wxServiceReqLoginBO.setMethod("loginReq");        wxServiceReqLoginBO.setPasswd("123456");        wxServiceReqLoginBO.setUname("hxw002");        wxServiceReqLoginBO.setStatistics(statistics);        log.info("websocket登录请求参数" + JSON.toJSONString(wxServiceReqLoginBO));        webSocketClient.sendMessageAsy(JSON.toJSONString(wxServiceReqLoginBO));        String websocketLoginResult=testReciever.getMessage();        log.info("websocket 返回消息参数mq=" + websocketLoginResult);        WebsocketResLoginPara websocketResLoginPara = JSON.parseObject(websocketLoginResult, WebsocketResLoginPara.class);        String[] Contents = {"开启测试a","开启测试a"};        WebsocketReqContentPara websocketContentPara = new WebsocketReqContentPara();        websocketContentPara.setBmAppid(websocketResLoginPara.getBmAppid());        websocketContentPara.setMethod("aichatReq");        websocketContentPara.setUid(websocketResLoginPara.getUid());        for (String Content : Contents        ) {            websocketContentPara.setContent(Content);            log.info("websocket请求参数" + JSON.toJSONString(websocketContentPara));             webSocketClient.sendMessageAsy(JSON.toJSONString(websocketContentPara));            log.info("websocket返消息回参数mq=" + testReciever.getMessage());        }        webSocketClient.onClose();    }    /**     * 1、登录增加统计信息，请求参数增加statistics且用户已经存在     */    @Test    public void WxServiceLoginTestByNotExistParameterStatisticsAndExistUser() {       initData();        WxServiceReqLoginBO wxServiceReqLoginBO = new WxServiceReqLoginBO();        Map<String,String> statistics=new HashMap<>();        statistics.put("channelNo","小程序服务端渠道编号");        statistics.put("维度一","渠道编号");        statistics.put("维度二","28");        wxServiceReqLoginBO.setBmAppid("1.00002");        wxServiceReqLoginBO.setMethod("loginReq");        wxServiceReqLoginBO.setPasswd("123456");        wxServiceReqLoginBO.setUname("hxw002");//        websocketLoginPara.setStatistics(statistics);        log.info("websocket登录请求参数" + JSON.toJSONString(wxServiceReqLoginBO));        webSocketClient.sendMessageAsy(JSON.toJSONString(wxServiceReqLoginBO));        String websocketLoginResult=testReciever.getMessage();        log.info("websocket 返回消息参数mq=" + websocketLoginResult);        WebsocketResLoginPara websocketResLoginPara = JSON.parseObject(websocketLoginResult, WebsocketResLoginPara.class);        String[] Contents = {"开启测试a","开启测试a"};        WebsocketReqContentPara websocketContentPara = new WebsocketReqContentPara();        websocketContentPara.setBmAppid(websocketResLoginPara.getBmAppid());        websocketContentPara.setMethod("aichatReq");        websocketContentPara.setUid(websocketResLoginPara.getUid());        for (String Content : Contents        ) {            websocketContentPara.setContent(Content);            log.info("websocket请求参数" + JSON.toJSONString(websocketContentPara));            webSocketClient.sendMessageAsy(JSON.toJSONString(websocketContentPara));            log.info("websocket返消息回参数mq=" + testReciever.getMessage());        }        webSocketClient.onClose();    }    /**     * 1、登录增加统计信息，请求参数增加statistics且属于新增用户     */    @Test    public void WxServiceLoginTestByExistParameterStatisticsAndNotExistUser() {       initData();        WxServiceReqLoginBO wxServiceReqLoginBO = new WxServiceReqLoginBO();        Map<String,String> statistics=new HashMap<>();        statistics.put("channelNo","公司小程序（绿色垃圾分类）-政府版本");        statistics.put("维度一","渠道编号");        statistics.put("维度二","28");        wxServiceReqLoginBO.setBmAppid("4.00048");        wxServiceReqLoginBO.setMethod("loginReq");        wxServiceReqLoginBO.setPasswd("");        wxServiceReqLoginBO.setUname("unionid_yangyi");        wxServiceReqLoginBO.setKeytp("unionid");        wxServiceReqLoginBO.setWxAppid("wxd996989304eaa926");        wxServiceReqLoginBO.setUserInfoRes("");        wxServiceReqLoginBO.setStatistics(statistics);        log.info("websocket登录请求参数" + JSON.toJSONString(wxServiceReqLoginBO));        webSocketClient.sendMessageAsy(JSON.toJSONString(wxServiceReqLoginBO));        String websocketLoginResult=null;        if (testReciever.getMessageCount()>0){            websocketLoginResult=testReciever.getMessage();        }        log.info("websocket 返回消息参数mq=" + websocketLoginResult);        webSocketClient.onClose();    }    /**     * 1、登录增加统计信息，请求参数statistics不传且属于新增用户     */    @Test    public void WxServiceLoginTestByNotExistParameterStatisticsAndNotExistUser() throws InterruptedException {        initData();        WxServiceReqLoginBO wxServiceReqLoginBO = new WxServiceReqLoginBO();        Map<String,String> statistics=new HashMap<>();        statistics.put("channelNo","小程序服务端渠道编号");        statistics.put("维度一","渠道编号");        statistics.put("维度二","28");        wxServiceReqLoginBO.setBmAppid("1.00002");        wxServiceReqLoginBO.setMethod("loginReq");        wxServiceReqLoginBO.setPasswd("123456");        wxServiceReqLoginBO.setUname("hxw002");//        websocketLoginPara.setStatistics(statistics);        log.info("websocket登录请求参数" + JSON.toJSONString(wxServiceReqLoginBO));        webSocketClient.sendMessageAsy(JSON.toJSONString(wxServiceReqLoginBO));        String websocketLoginResult=testReciever.getMessage();        log.info("websocket 返回消息参数mq=" + websocketLoginResult);        WebsocketResLoginPara websocketResLoginPara = JSON.parseObject(websocketLoginResult, WebsocketResLoginPara.class);        String[] Contents = {"开启测试a","开启测试a"};        WebsocketReqContentPara websocketContentPara = new WebsocketReqContentPara();        websocketContentPara.setBmAppid(websocketResLoginPara.getBmAppid());        websocketContentPara.setMethod("aichatReq");        websocketContentPara.setUid(websocketResLoginPara.getUid());        for (String Content : Contents        ) {            websocketContentPara.setContent(Content);            log.info("websocket请求参数" + JSON.toJSONString(websocketContentPara));            webSocketClient.sendMessageAsy(JSON.toJSONString(websocketContentPara));            String websocketResContentObj=testReciever.getMessage();            log.info("websocket返消息回参数mq=" + websocketResContentObj);        }        for (int i = 0; i < 10; i++) {            sendWxServiceHeartBeat(webSocketClient,wxServiceReqLoginBO,websocketLoginResult);        }        webSocketClient.onClose();    }    /**     * 1、登录接口增加小程序订阅字段："maintenanceSubscribe" : ["appid1","appid2"]     */    @Test    public void WxServiceLoginTestByParameterMaintenanceSubscribe() throws InterruptedException {       initData();        WxServiceReqLoginBO wxServiceReqLoginBO = new WxServiceReqLoginBO();        Map<String,String> statistics=new HashMap<>();        statistics.put("channelNo","小程序服务端渠道编号");        statistics.put("维度一","渠道编号");        statistics.put("维度二","28");        wxServiceReqLoginBO.setBmAppid("1.00002");        wxServiceReqLoginBO.setMethod("loginReq");        wxServiceReqLoginBO.setPasswd("123456");        wxServiceReqLoginBO.setUname("hxw002");        wxServiceReqLoginBO.setStatistics(statistics);        List<String> maintenanceSubscribe=new ArrayList<>();        maintenanceSubscribe.add("1.00002");        maintenanceSubscribe.add("1.00003");//        maintenanceSubscribe.add("9.00003");        wxServiceReqLoginBO.setMaintenanceSubscribe(maintenanceSubscribe);        log.info("websocket登录请求参数" + JSON.toJSONString(wxServiceReqLoginBO));        webSocketClient.sendMessageAsy(JSON.toJSONString(wxServiceReqLoginBO));        String websocketLoginResult=testReciever.getMessage();        log.info("websocket 返回消息参数mq=" + websocketLoginResult);        WebsocketResLoginPara websocketResLoginPara = JSON.parseObject(websocketLoginResult, WebsocketResLoginPara.class);        String[] Contents = {"灵活就业人员\n\n缴费标准\n","开启测试a","开启测试a","开启测试a"};        WebsocketReqContentPara websocketContentPara = new WebsocketReqContentPara();        websocketContentPara.setBmAppid(websocketResLoginPara.getBmAppid());        websocketContentPara.setMethod("aichatReq");        websocketContentPara.setUid(websocketResLoginPara.getUid());        for (String Content : Contents        ) {            websocketContentPara.setContent(Content);            log.info("websocket请求参数" + JSON.toJSONString(websocketContentPara));            webSocketClient.sendMessageAsy(JSON.toJSONString(websocketContentPara));            log.info("websocket返消息回参数mq=" + testReciever.getMessage());            sendWxServiceHeartBeat(webSocketClient,wxServiceReqLoginBO,websocketLoginResult);        }        for (int i = 0; i < 10; i++) {            if(!JSON.parseObject(websocketLoginResult, WebsocketResLoginPara.class).getStrUid().equals("-1")){                sendWxServiceHeartBeat(webSocketClient,wxServiceReqLoginBO,websocketLoginResult);            }        }        webSocketClient.onClose();    }    private String sendWxServiceHeartBeat(WebSocketClient webSocketClient,WxServiceReqLoginBO wxServiceReqLoginBO,String websocketLoginObj){        String wxServiceHeartBeatResult=null;        try{            WxServiceHeartBeatBO wxServiceHeartBeatBO=new WxServiceHeartBeatBO();            wxServiceHeartBeatBO.setWxAppid("wxd996989304eaa926");            wxServiceHeartBeatBO.setUid(JsonPath.read(websocketLoginObj,"$.strUid"));            wxServiceHeartBeatBO.setMethod("heartbeat");            log.info("wxServiceHeartBeat 发送心跳请求参数" + JSON.toJSONString(wxServiceHeartBeatBO));            wxServiceHeartBeatResult=wxServiceHeartBeatTest.WxServiceHeartBeatTestByGernal(webSocketClient,wxServiceHeartBeatBO);            log.info("wxServiceHeartBeatResult 接收心跳返回消息" + wxServiceHeartBeatResult);            Thread.sleep(30000);        }catch (Exception e){            e.printStackTrace();        }        return wxServiceHeartBeatResult;    }    @Override    public void destroyData() {        TKeyindexExample example=new TKeyindexExample();        TKeyindexExample.Criteria cr=example.createCriteria();        cr.andKeyvalueEqualTo("unionid_yangyi");        List<TKeyindex> list= tKeyindexRepository.selectByExample(example);        if(list.size()>0){            TKeyindexExample tKeyindexExample=new TKeyindexExample();            TKeyindexExample.Criteria deleteTKeyindexExampleCR=tKeyindexExample.createCriteria();            deleteTKeyindexExampleCR.andUidEqualTo(list.get(0).getUid());            tKeyindexRepository.deleteByExample(tKeyindexExample);            TUserExample tUserExample=new TUserExample();            TUserExample.Criteria tUserExampleCr=tUserExample.createCriteria();            tUserExampleCr.andUidEqualTo(list.get(0).getUid());            tUserRepository.deleteByExample(tUserExample);            TUserkeysExample tUserkeysExample=new TUserkeysExample();            TUserkeysExample.Criteria tUserkeysExampleCr=tUserkeysExample.createCriteria();            tUserkeysExampleCr.andUidEqualTo(list.get(0).getUid());            tUserkeysRepository.deleteByExample(tUserkeysExample);        }    }    @Override    public String initUrl() {        return urls.get(ModuleNameEnum.getName(12));    }    @Override    public void initData() {        destroyData();        testReciever.clearAllExistMessage();        webSocketClient = new WebSocketClient(url);        webSocketClient.setTestProducer(testProducer);    }}