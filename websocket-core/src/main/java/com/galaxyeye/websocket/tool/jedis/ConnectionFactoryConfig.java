package com.galaxyeye.websocket.tool.jedis;/* * Description:com.galaxyeye.websocket.tool.jedis * @Date Create on 23:14 * @author <a href="mailto:yangyi@zuozh.com">yangyi</a> * @Version JDK 1.7 * @since version 1.0 Copyright 2019-04-23æ—¥ZZJR All Rights Reserved. */import lombok.extern.slf4j.Slf4j;import org.springframework.beans.BeansException;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.beans.factory.config.BeanPostProcessor;import org.springframework.context.ApplicationContext;import org.springframework.context.ApplicationContextAware;import org.springframework.context.annotation.Bean;import org.springframework.dao.DataAccessException;import org.springframework.data.redis.connection.*;import org.springframework.data.redis.connection.jedis.JedisClientConfiguration;import org.springframework.data.redis.connection.jedis.JedisConnectionFactory;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.stereotype.Component;import redis.clients.jedis.HostAndPort;import redis.clients.jedis.JedisCluster;import redis.clients.jedis.JedisPoolConfig;import java.time.Duration;import java.util.*;import java.util.stream.Collectors;import java.util.stream.Stream;@Slf4j@Componentpublic class ConnectionFactoryConfig implements RedisConnectionFactory, BeanPostProcessor, ApplicationContextAware {	private ApplicationContext app;	@Autowired	JedisPoolConfig jedisPoolConfig;	@Override	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {		this.app = applicationContext;	}	@Bean(name = "jedisConnectionFactory")	public JedisConnectionFactory clusterInit() {		JedisPoolConfig poolConfig = new JedisPoolConfig();		poolConfig.setMaxTotal(1);		poolConfig.setMaxIdle(1);		poolConfig.setMaxWaitMillis(1000);		ArrayList<String> redisList=new ArrayList<String>();		redisList.add("192.168.1.104:7000");		redisList.add("192.168.1.104:7001");		redisList.add("192.168.1.104:7002");		redisList.add("192.168.1.104:7003");		redisList.add("192.168.1.104:7004");		redisList.add("192.168.1.104:7005");		RedisClusterConfiguration clusterConfig=new RedisClusterConfiguration(redisList);		JedisConnectionFactory jedisConnectionFactory = new JedisConnectionFactory(clusterConfig,poolConfig);		return jedisConnectionFactory;	}	@Override	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {		Object redisTemplateObj = app.getBean("redisTemplate");		JedisConnectionFactory jedisConnectionFactory = (JedisConnectionFactory) app.getBean("jedisConnectionFactory");		RedisTemplate redisTemplateObjTmp=null;		if(redisTemplateObj !=null && redisTemplateObj instanceof RedisTemplate){			 redisTemplateObjTmp = (RedisTemplate) redisTemplateObj;		}		if (beanName.contains("redisTemplate") && bean instanceof RedisTemplate) {			redisTemplateObjTmp.setConnectionFactory(jedisConnectionFactory);			return redisTemplateObjTmp;		}		return bean;	}	@Bean(name="jedisCluster")	public JedisCluster jedisCluster() {		Set<HostAndPort> nodeSet = new HashSet<>();		nodeSet.add(new HostAndPort("192.168.1.104", 7000));		nodeSet.add(new HostAndPort("192.168.1.104", 7001));		nodeSet.add(new HostAndPort("192.168.1.104", 7002));		nodeSet.add(new HostAndPort("192.168.1.104", 7003));		nodeSet.add(new HostAndPort("192.168.1.104", 7004));		nodeSet.add(new HostAndPort("192.168.1.104", 7005));		JedisCluster jedisCluster = new JedisCluster(nodeSet, 1000, jedisPoolConfig);		return jedisCluster;	}	@Override	public RedisConnection getConnection() {		return null;	}	@Override	public RedisClusterConnection getClusterConnection() {		return null;	}	@Override	public boolean getConvertPipelineAndTxResults() {		return false;	}	@Override	public RedisSentinelConnection getSentinelConnection() {		return null;	}	@Override	public DataAccessException translateExceptionIfPossible(RuntimeException e) {		return null;	}}